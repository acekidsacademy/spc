- generate config.py file on "sp init"
- add tags to add app
- tried to separate routes into separate files, but this is a problem
  because of global vars such as myapps or user
- when unzip file make sure to change to filename that user set as appname
- what to use for T/F values? must standardize on sth
  depends on what is in the input file... 
  must ask how app represents Boolean values

- refactor: capitalize all class names to be consistent with Python naming
  conventions
- refactor: rename all routes with consistent naming scheme
- give apps an owner... either owner or admin can modify
- need to write pid to db on start of job, then pull it out and
  run os.kill when need to stop job
- work on scheduler
    x get multithreading working
    * take into account num of processors users has requested when starting jobs
    * add shutdown feature
- consolidate app, cid vars when passing on almost every click
- fix databases add foreign key references
    * rewrite sp to use DAL to create the tables
- develop admin section
- be able to attach input variables to be used by simulation 
   e.g. use num_tribes parameter to set np
        use scipaas_case_id parameter within simulation
- on delete case from myjobs, cascade delete wall comments
- make egg package
- clickable rows
- parse json... need do parse the string and wrap quotes around each key
    * outsource this to StackOverflow

- implement worker queues
    * add stop button to jobs page.  problem is need to have another thread
      to be able to stop the job.  try using RQ (Redis Queue, python-rq.org)
- special interest groups
- remove flot-bar.tpl and rename flot-line.tpl to flot.tpl
- create a table which maps plots to datasource and get rid of pltid column in datasource
- have a disabled flag for app, plots, etc. so that they can stay in the database
  but not be acted upon
- apps.py - need to specify a type with each parameter in input file
- how to deal with Booleans input parameters in a consistent way
  i.e. do you want to always output true or false??
- work on getting Nemo working with pre- and post-processors
- make datasource editable and save to db
- add description to jobs... do a jobs natural join wall when displaying myjobs
- star favorite runs, and then able to sort on stars
- keep a log of everytime scipaas crashes and what was the url
- save run as template
- when delete case in jobs, also delete file directory
- add plot button to wall, so any user can plot any other user's case
- add label, bar/chart and color options to datasource
- share plot to wall (need to convert flot to image): 
    see: http://stackoverflow.com/questions/15616925/save-flot-graph-as-image
    see: https://plot.ly/feed/
- add button to turn on ajax refreshing for any plot
- add xlabel, ylabel, xrange, yrange, logscale, markings, display-order options to plots

Next:
- add billing ability
- add search button to myjobs
- create reader for generic input file
- for namelist.input files ignore comments !
- ignore lines option for plotting files
- plots: log scale, xrange, yrange, xtitle, ytitle
- write unit tests!!
- get scipaas working under gae
- for errors especially in try/except structures, try to show some error message
  that is consistent with why it actually crashed.
- improve add app interface, use ajax to check if app exists
- if there is only one plot, show it on clicking the plot button
- about app template
- change job actions (e.g. delete, stop, etc.) to post rather than get method
- if values not defined in default <appname>.in file check for that 
  in the template e.g. % if not defined ...
- do AJAX update on job scheduler and output instead of meta-refresh
- store cookie of which app the user was previously using, and go straight to that app

- be able to submit job description from start page
- some code for managing the EC2 machine
- move code to load apps into apps.py
- edit app page

--
Feature Requests
- templates
- billing model:
   o based on CPU usage
   o based on number of apps hosted
   o based on number of times run
   o based on amount of disk space used
- info about app page... e.g. intro to importance of Burger's eqn
- JS/Ajax check if appname already exists
- user page/user management: my apps, change passwd, etc.
- file manager... or data button to see data in output files
- implement haml templates
- workflow system
- integration to openshift

Bug fixes
- when form items are disabled by JS they don't show up in the forms data structure
  (fix in apps.write_params() method)
- error when click plot when case id not set... need to warn user beforehand

Refactoring
- DRY out the __init__ functions, put all common items in inhereted classes into apps superclass 
- create some kind of function to return 
        sim_dir = myapps[app].user_dir+os.sep+user+os.sep+app+os.sep+cid+os.sep
- CRUD superclass... all models inherit from CRUD superclass
- group common params that get passed to navbar in object?
- cleanup long pathnames such as sim_dir, run_dir, and fn in 
  apps.py and scipaas.py
