Currently working on: 
- edit plots feature: when you click plot, you get the first plot
  if you want to edit the plots, you need to click edit app or something

Next:
- refactor: create some kind of function to return 
        sim_dir = myapps[app].user_dir+os.sep+user+os.sep+app+os.sep+cid+os.sep
- add billing ability
- add search button to myjobs
- add "list files" button, probably in myjobs
- use dal.py to create initdb in sp
- create reader for generic input file
- for namelist.input files ignore comments !
- ignore lines option for plotting files
- plots: log scale, xrange, yrange, xtitle, ytitle
- write unit tests!!
- get scipaas working under gae
- use matplotlib for plotting
- for errors especially in try/except structures, try to show some error message
  that is consistent with why it actually crashed.
- implement worker queues
    * add stop button to jobs page.  problem is need to have another thread
      to be able to stop the job.  try using RQ (Redis Queue, python-rq.org)

- remove macaron/sqlite references from sp
- improve add app interface, use ajax to check if app exists
- if there is only one plot, show it on clicking the plot button
- about app template
- change job actions (e.g. delete, stop, etc.) to post rather than get method
- if values not defined in default <appname>.in file check for that 
  in the template e.g. % if not defined ...
- do AJAX update on job scheduler and output instead of meta-refresh
- store cookie of which app the user was previously using, and go straight to that app

- be able to submit job description from start page
- plotting:
  o specify x-legend, y-legend
  o specify x-min, x-max, y-min, y-max
- some code for managing the EC2 machine
- move code to load apps into apps.py
- edit app page

--
Feature Requests
- plotting subsystem
  o plotting system using matplotlib
- info about app page... e.g. intro to importance of Burger's eqn
- JS/Ajax check if appname already exists
- user page/user management: my apps, change passwd, etc.
- file manager... or data button to see data in output files
- implement haml templates
- workflow system
- integration to openshift

Bug fixes
- when form items are disabled by JS they don't show up in the forms data structure
  (fix in apps.write_params() method)
- error when click plot when case id not set... need to warn user beforehand

Refactoring
- CRUD superclass... all models inherit from CRUD superclass
- group common params that get passed to navbar in object?
- cleanup long pathnames such as sim_dir, run_dir, and fn in 
  apps.py and scipaas.py

Tests
- test new user registration
- test new user registration same name as already exists
- test user login 
- test that when file unzips the unzipped directory is the same
  as the zip file name
- if click list when directory doesnt exist >> error 405
- if click Upload but file not first selected >> error
- upload verify works with .in and exe file
- verify throws error with no .in file
- verify throws error with no exe file
- test if writing parameters correctly especially test booleans, integers,
  strings, etc.

Completed
- aggregate plots onto single page
- add Data button to plots
- add ability to get data from line1 to line2
- integration with matplotlib
- implement data abstraction layer, dal.py, so that SP can use GAE
    * due to namespace conflicts, need to create the dal model as a separate class, 
      i.e. plots table accessed by myclass.plots
- Fix security vulnerability: check_user after user submits. make sure new user is not created if username
  already in DB.  
- implement ConfigParser -- possibly move to supporting INI files
- generic xml or ini reader
- be able to click jobs, click start, use appname and jid to bring up correct start page
- job scheduler/queuing system
- implement ConfigParser to read-in nemo input file
- starting from an old case doesnt bring up old case params, but rather defaults
- add better ability to handle html select option, etc.
- find a way to populate select/option form fields using template
    # http://stackoverflow.com/questions/20444285/how-do-i-populate-a-select-tag-with-flask
- fix bar plotting
- add ability to reload parameters from old case
- when click confirm show input file
- add UID 
- add bar plot ability
- continuous updating of screen output: Ajax or built-in alternative
  + data monitoring system: ajax and python-based
- add footer
- add jobs button
- job scheduler/queuing system
- case management
- app management: update, delete, and finish add section
  o move 
  o upload
    > verify that upload contains the necessary files (e.g. .in & binary)
    > hook into scipaas... dynamic importing 
  o app deployment (egg format/zip file)
  o rename app
  o put different app categories into database
- add ability to handle multiple plots
- real-time data monitor
